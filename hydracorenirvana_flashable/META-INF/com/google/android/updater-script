ui_print("---------- Welcome to @@MAXFUNAME@@ ----------");
ui_print("Preparing Partitions");
unmount("/system");
unmount("/data");
unmount("/cache");
mount("ext4", "EMMC", "/dev/block/mmcblk0p9", "/system");
if
  file_getprop("/tmp/aroma/kernel.prop","selected") == "1"
then
  ui_print("Installing @@MAXFUNAME@@ Kernel");
  delete("/tmp/zImage");
  assert(package_extract_file("zImage", "/tmp/zImage"),
         write_raw_image("/tmp/zImage", "/dev/block/mmcblk0p5"),
         delete("/tmp/zImage"));
  package_extract_dir("system", "/system");
endif;
if
  file_getprop("/tmp/aroma/kernel.prop","selected") == "2"
then
  ui_print("Installing @@MAXFUNAME@@ Kernel");
  delete("/tmp/zImage");
  assert(package_extract_file("zImage", "/tmp/zImage"),
         write_raw_image("/tmp/zImage", "/dev/block/mmcblk0p5"),
         delete("/tmp/zImage"));
  package_extract_dir("system", "/system");
  ui_print("Installing Mali Libraries");
  package_extract_dir("libraries", "/system");
endif;
if
  file_getprop("/tmp/aroma/kernel.prop","selected") == "4"
then
  ui_print("Installing Mali Libraries");
  package_extract_dir("libraries", "/system");
endif;
package_extract_file("maxfusetup.sh", "/tmp/maxfusetup.sh");
set_perm(0, 0, 0777, "/tmp/maxfusetup.sh");
if
  file_getprop("/tmp/aroma/romtype.prop","selected") == "1"
then
  ui_print("Force the ROM Type to Automatic");
  run_program("/tmp/maxfusetup.sh", "romtype", "automatic");
endif;
if
  file_getprop("/tmp/aroma/romtype.prop","selected") == "2"
then
  ui_print("Force the ROM Type to TouchWiz");
  run_program("/tmp/maxfusetup.sh", "romtype", "touchwiz");
endif;
if
  file_getprop("/tmp/aroma/romtype.prop","selected") == "3"
then
  ui_print("Force the ROM Type to AOSP");
  run_program("/tmp/maxfusetup.sh", "romtype", "aosp");
endif;
if
  file_getprop("/tmp/aroma/romtype.prop","selected") == "4"
then
  ui_print("Force the ROM Type to MIUI");
  run_program("/tmp/maxfusetup.sh", "romtype", "miui");
endif;
if
  file_getprop("/tmp/aroma/cpumax.prop","selected") == "1"
then
  ui_print("Force the CPU MaxFreq to 1600MHz");
  run_program("/tmp/maxfusetup.sh", "cpumax", "1600000");
endif;
if
  file_getprop("/tmp/aroma/cpumax.prop","selected") == "2"
then
  ui_print("Force the CPU MaxFreq to 1400MHz");
  run_program("/tmp/maxfusetup.sh", "cpumax", "1400000");
endif;
if
  file_getprop("/tmp/aroma/cpumax.prop","selected") == "3"
then
  ui_print("Force the CPU MaxFreq to 1200MHz");
  run_program("/tmp/maxfusetup.sh", "cpumax", "1200000");
endif;
if
  file_getprop("/tmp/aroma/cpumax.prop","selected") == "4"
then
  ui_print("Force the CPU MaxFreq to 1000MHz");
  run_program("/tmp/maxfusetup.sh", "cpumax", "1000000");
endif;
if
  file_getprop("/tmp/aroma/cpumax.prop","selected") == "5"
then
  ui_print("Force the CPU MaxFreq to 800MHz");
  run_program("/tmp/maxfusetup.sh", "cpumax", "800000");
endif;
if
  file_getprop("/tmp/aroma/cpumin.prop","selected") == "1"
then
  ui_print("Force the CPU MinFreq to 100MHz");
  run_program("/tmp/maxfusetup.sh", "cpumin", "100000");
endif;
if
  file_getprop("/tmp/aroma/cpumin.prop","selected") == "2"
then
  ui_print("Force the CPU MinFreq to 200MHz");
  run_program("/tmp/maxfusetup.sh", "cpumin", "200000");
endif;
if
  file_getprop("/tmp/aroma/cpumin.prop","selected") == "3"
then
  ui_print("Force the CPU MinFreq to 500MHz");
  run_program("/tmp/maxfusetup.sh", "cpumin", "500000");
endif;
if
  file_getprop("/tmp/aroma/cpumin.prop","selected") == "4"
then
  ui_print("Force the CPU MinFreq to 800MHz");
  run_program("/tmp/maxfusetup.sh", "cpumin", "800000");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "1"
then
  ui_print("Force the CPU Governor to Ondemand");
  run_program("/tmp/maxfusetup.sh", "cpugov", "ondemand");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "2"
then
  ui_print("Force the CPU Governor to Conservative");
  run_program("/tmp/maxfusetup.sh", "cpugov", "conservative");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "3"
then
  ui_print("Force the CPU Governor to PegasusQ");
  run_program("/tmp/maxfusetup.sh", "cpugov", "pegasusq");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "4"
then
  ui_print("Force the CPU Governor to Lulzactive");
  run_program("/tmp/maxfusetup.sh", "cpugov", "lulzactive");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "5"
then
  ui_print("Force the CPU Governor to Smartass");
  run_program("/tmp/maxfusetup.sh", "cpugov", "smartass");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "6"
then
  ui_print("Force the CPU Governor to Smartass v2");
  run_program("/tmp/maxfusetup.sh", "cpugov", "smartass2");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "7"
then
  ui_print("Force the CPU Governor to Lagfree");
  run_program("/tmp/maxfusetup.sh", "cpugov", "lagfree");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "8"
then
  ui_print("Force the CPU Governor to Interactive");
  run_program("/tmp/maxfusetup.sh", "cpugov", "interactive");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "9"
then
  ui_print("Force the CPU Governor to Adaptive");
  run_program("/tmp/maxfusetup.sh", "cpugov", "adaptive");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "10"
then
  ui_print("Force the CPU Governor to Powersave");
  run_program("/tmp/maxfusetup.sh", "cpugov", "powersave");
endif;
if
  file_getprop("/tmp/aroma/cpugov.prop","selected") == "11"
then
  ui_print("Force the CPU Governor to Performance");
  run_program("/tmp/maxfusetup.sh", "cpugov", "performance");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "1"
then
  ui_print("Force the IO Scheduler to Noop");
  run_program("/tmp/maxfusetup.sh", "iosched", "noop");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "2"
then
  ui_print("Force the IO Scheduler to Deadline");
  run_program("/tmp/maxfusetup.sh", "iosched", "deadline");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "3"
then
  ui_print("Force the IO Scheduler to SIO");
  run_program("/tmp/maxfusetup.sh", "iosched", "sio");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "4"
then
  ui_print("Force the IO Scheduler to CFQ");
  run_program("/tmp/maxfusetup.sh", "iosched", "cfq");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "5"
then
  ui_print("Force the IO Scheduler to ROW");
  run_program("/tmp/maxfusetup.sh", "iosched", "row");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "6"
then
  ui_print("Force the IO Scheduler to VR");
  run_program("/tmp/maxfusetup.sh", "iosched", "vr");
endif;
if
  file_getprop("/tmp/aroma/iosched.prop","selected") == "7"
then
  ui_print("Force the IO Scheduler to ZEN");
  run_program("/tmp/maxfusetup.sh", "iosched", "zen");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.2") == "1"
then
  ui_print("Enable Logcat");
  run_program("/tmp/maxfusetup.sh", "logcat", "enable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.2") == "2"
then
  ui_print("Disable Logcat");
  run_program("/tmp/maxfusetup.sh", "logcat", "disable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.3") == "1"
then
  ui_print("Enable zRam with swap");
  run_program("/tmp/maxfusetup.sh", "zram", "enable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.3") == "2"
then
  ui_print("Disable zRam with swap");
  run_program("/tmp/maxfusetup.sh", "zram", "disable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.4") == "1"
then
  ui_print("Enable Seeder");
  run_program("/tmp/maxfusetup.sh", "seeder", "enable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.4") == "2"
then
  ui_print("Disable Seeder");
  run_program("/tmp/maxfusetup.sh", "seeder", "disable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.5") == "1"
then
  ui_print("Enable J4FS");
  run_program("/tmp/maxfusetup.sh", "j4fs", "enable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.6") == "2"
then
  ui_print("Disable J4FS");
  run_program("/tmp/maxfusetup.sh", "j4fs", "disable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.5") == "1"
then
  ui_print("Enable CIFS");
  run_program("/tmp/maxfusetup.sh", "cifs", "enable");
endif;
if
  file_getprop("/tmp/aroma/other.prop","selected.5") == "2"
then
  ui_print("Disable CIFS");
  run_program("/tmp/maxfusetup.sh", "cifs", "disable");
endif;
unmount("/system");
if
  file_getprop("/tmp/aroma/other.prop","selected.1") == "1"
then
  ui_print("Wipping Dalvik-Cache");
  unmount("/data");
  mount("ext4", "EMMC", "/dev/block/mmcblk0p10", "/data");
  delete_recursive("/data/dalvik-cache");
  unmount("/data");
  unmount("/cache");
  mount("ext4", "EMMC", "/dev/block/mmcblk0p7", "/cache");
  delete_recursive("/cache/dalvik-cache");
  unmount("/cache");
endif;
ui_print(" ");
ui_print("Finished");
set_progress(1);
